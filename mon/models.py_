# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Cms(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField()
    url_key = models.TextField(db_column='url-key')  # Field renamed to remove unsuitable characters.
    meta_title = models.CharField(db_column='meta-title', max_length=255, blank=True, null=True)  # Field renamed to remove unsuitable characters.
    meta_description = models.TextField(db_column='meta-description', blank=True, null=True)  # Field renamed to remove unsuitable characters.
    meta_keywords = models.TextField(db_column='meta-keywords', blank=True, null=True)  # Field renamed to remove unsuitable characters.
    status = models.IntegerField()
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'cms'


class Counties(models.Model):
    county_name = models.CharField(max_length=255)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    url_key = models.CharField(max_length=255, blank=True, null=True)
    seo_sort = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'counties'


class Locs(models.Model):
    county = models.ForeignKey(Counties, models.DO_NOTHING)
    loc_name = models.CharField(max_length=255)
    latitude = models.DecimalField(max_digits=11, decimal_places=8, blank=True, null=True)
    longitude = models.DecimalField(max_digits=11, decimal_places=8, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    url_key = models.CharField(max_length=255, blank=True, null=True)
    seo_sort = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'locs'
        unique_together = (('county', 'loc_name'),)


class Migrations(models.Model):
    migration = models.CharField(max_length=255)
    batch = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'migrations'


class PasswordResets(models.Model):
    email = models.CharField(max_length=255)
    token = models.CharField(max_length=255)
    created_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'password_resets'


class Projects(models.Model):
    uuid = models.CharField(max_length=36)
    title = models.CharField(max_length=255)
    description = models.TextField()
    type = models.IntegerField()
    loc = models.IntegerField()
    status = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    user = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)
    tradesman = models.ForeignKey('Users', models.DO_NOTHING, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'projects'


class ProjectsToTradesman(models.Model):
    project = models.ForeignKey(Projects, models.DO_NOTHING)
    tradesman = models.ForeignKey('Users', models.DO_NOTHING)
    comment = models.CharField(max_length=255, blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'projects_to_tradesman'


class RoleUser(models.Model):
    role_id = models.PositiveIntegerField()
    user_id = models.PositiveIntegerField()

    class Meta:
        managed = False
        db_table = 'role_user'


class Roles(models.Model):
    name = models.CharField(max_length=255)
    description = models.CharField(max_length=255)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'roles'


class TraderTypes(models.Model):
    parent_id = models.PositiveIntegerField(blank=True, null=True)
    name = models.CharField(unique=True, max_length=255)
    name_plural = models.CharField(max_length=255)
    url_key = models.CharField(max_length=255)
    description = models.CharField(max_length=255, blank=True, null=True)
    suggested_title = models.CharField(max_length=255, blank=True, null=True)
    suggested_description = models.CharField(max_length=255, blank=True, null=True)
    sort_order = models.IntegerField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'trader_types'


class TradesmanFeedbacks(models.Model):
    project_id = models.PositiveIntegerField()
    user_id = models.PositiveIntegerField()
    tradesman_id = models.PositiveIntegerField()
    type = models.IntegerField()
    comment = models.TextField()
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tradesman_feedbacks'
        unique_together = (('project_id', 'user_id', 'tradesman_id'),)


class TradesmanProfiles(models.Model):
    photo = models.CharField(max_length=255, blank=True, null=True)
    thumbnail = models.CharField(max_length=255, blank=True, null=True)
    profile = models.TextField()
    company = models.CharField(max_length=255, blank=True, null=True)
    username_slug = models.CharField(max_length=255)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    no_feedbacks = models.IntegerField(blank=True, null=True)
    percent_positives = models.IntegerField(blank=True, null=True)
    photo_id_card = models.CharField(max_length=255, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tradesman_profiles'


class TradesmanToTypes(models.Model):
    user = models.ForeignKey('Users', models.DO_NOTHING)
    type = models.ForeignKey(TraderTypes, models.DO_NOTHING)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tradesman_to_types'
        unique_together = (('user', 'type'),)


class Tradesmen(models.Model):
    username = models.CharField(max_length=255)
    firstname = models.CharField(max_length=255)
    lastname = models.CharField(max_length=255)
    address_1 = models.CharField(max_length=255)
    address_2 = models.CharField(max_length=255)
    address_city = models.CharField(max_length=255)
    phonenumber = models.CharField(max_length=255)
    subscription_sms_alerts = models.IntegerField()
    subscription_newsletter = models.IntegerField()
    subscription_surveys = models.IntegerField()
    user = models.ForeignKey('Users', models.DO_NOTHING)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'tradesmen'


class UserProfiles(models.Model):
    username = models.CharField(max_length=255)
    firstname = models.CharField(max_length=255)
    lastname = models.CharField(max_length=255, blank=True, null=True)
    address_1 = models.CharField(max_length=255, blank=True, null=True)
    address_2 = models.CharField(max_length=255, blank=True, null=True)
    address_city = models.CharField(max_length=100, blank=True, null=True)
    phonenumber = models.CharField(max_length=255)
    subscription_sms_alerts = models.IntegerField(blank=True, null=True)
    subscription_newsletter = models.IntegerField(blank=True, null=True)
    subscription_surveys = models.IntegerField(blank=True, null=True)
    user_type = models.CharField(max_length=255, blank=True, null=True)
    status = models.IntegerField(blank=True, null=True)
    last_login = models.DateTimeField(blank=True, null=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_profiles'


class Users(models.Model):
    name = models.CharField(max_length=255)
    email = models.CharField(unique=True, max_length=255)
    email_verified_at = models.DateTimeField(blank=True, null=True)
    password = models.CharField(max_length=255)
    remember_token = models.CharField(max_length=100, blank=True, null=True)
    ip = models.CharField(max_length=255)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users'
